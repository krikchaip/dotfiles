#!/bin/bash

#** Will not proceed further until DisplayLink has started
while ! pgrep DisplayLinkUserAgent; do
  printf "Waiting for \033[93mDisplayLinkUserAgent\033[0m process to be started ⌛️\n"
  sleep 3
done

GAP=8

HAS_ONLY_INTERNAL=$(yabai -m query --displays | jq 'length == 1 and ([.[].frame.w, .[].frame.h] | min) < 1440')
INTERNAL_SPACE_IDS=$(yabai -m query --displays | jq -r 'map(select(([.frame.w, .frame.h] | min) < 1440)) | .[].spaces | @sh')

#**************************************************************#
#***************** [Global Configurations] ********************#
#**************************************************************#

#** Set mouse follows focus mode
yabai -m config mouse_follows_focus on

#** Focus windows without having to click on them
#** off       (default macos behaviour)
#** autofocus (window gets focused, but not raised)
#** autoraise (window gets raised as if it was clicked on)
# yabai -m config focus_follows_mouse autofocus

#** Specify which display a newly created window should be managed in
#** default : The display in which the window is created (standard macOS behaviour).
#** focused : The display that has focus when the window is created.
#** cursor  : The display that currently holds the mouse cursor.
yabai -m config window_origin_display focused

#** New window spawns to the ...
#** first_child  : left if vertical split, or top if horizontal split
#** second_child : right if vertical split, or bottom if horizontal split
yabai -m config window_placement second_child

#** A value of 0.2 means that the old window occupies 20% of the available space and the new window occupies 80% of the available space.
# yabai -m config split_ratio 0.667

#** Specify how a window should be split.
#** auto       : The axis is determined based on width/height ratio.
#** vertical   : The window is split along the y-axis.
#** horizontal : The window is split along the x-axis.
yabai -m config split_type auto

#** Makes it so all windows always occupy the same space, independent of how deeply nested they are in the window tree.
yabai -m config auto_balance off

#** Set mouse interaction modifier key (default: fn)
yabai -m config mouse_modifier alt

#** Set modifier + left-click drag to move window (default: move)
# yabai -m config mouse_action1 move

#** Set modifier + right-click drag to resize window (default: resize)
# yabai -m config mouse_action2 resize

#** Action performed when a bsp-managed window is dropped in the center of some other bsp-managed window.
#** value: swap | stack
yabai -m config mouse_drop_action stack

#** Windows are now managed by yabai
#** value: float(unmanaged) | bsp | stack
if [ "$HAS_ONLY_INTERNAL" = true ]; then
  yabai -m config layout stack
else
  yabai -m config layout bsp

  #** internal display spaces are always stacked
  for SID in $INTERNAL_SPACE_IDS; do
    yabai -m config --space "$SID" layout stack
  done
fi

#** Padding and gaps
yabai -m config top_padding $GAP
yabai -m config bottom_padding $GAP
yabai -m config left_padding $GAP
yabai -m config right_padding $GAP
yabai -m config window_gap $GAP

#**************************************************************#
#** [System Integrity Protection must be partially disabled] **#
#**************************************************************#

#** Modify window shadows (default: on, options: on, off, float)
#** example: show shadows only for floating windows
# yabai -m config window_shadow off

#** Window opacity (default: off)
# yabai -m config window_opacity on
# yabai -m config active_window_opacity 1.0
# yabai -m config normal_window_opacity 0.9

#**************************************************************#
#******************* [Rules and Signals] **********************#
#**************************************************************#

#** All applications are unmanaged by default
# yabai -m rule --add app=".*" manage=off

#** Allow only these applications to be managed
# yabai -m rule --add app="^Google Chrome$" manage=on
# yabai -m rule --add app="^Code$" manage=on
# yabai -m rule --add app="^Notion$" manage=on
# yabai -m rule --add app="^Terminal$" manage=on

#** Disallow these applications from being managed by yabai
yabai -m rule --add app="^1Password$" manage=off
yabai -m rule --add app="^Activity Monitor$" manage=off
yabai -m rule --add app="^Calculator$" manage=off
yabai -m rule --add app="^Dictionary$" manage=off
yabai -m rule --add app="^Finder$" manage=off
yabai -m rule --add app="^Logi Options\+$" manage=off
yabai -m rule --add app="^OpenVPN Connect$" manage=off
yabai -m rule --add app="^Reminders$" manage=off
yabai -m rule --add app="^Shortcat$" manage=off
yabai -m rule --add app="^SpaceLauncher$" manage=off
yabai -m rule --add app="^Stickies$" manage=off grid=10:10:0:9:3:1
yabai -m rule --add app="^System Settings$" manage=off

#** Re-adjust spaces when display changes
# yabai -m signal --add event=display_added action="if [ $HAS_ONLY_INTERNAL = true ]; then yabai -m config layout stack; else yabai -m config layout bsp; for SID in $INTERNAL_SPACE_IDS; do yabai -m config --space \$SID layout stack; done; fi"
# yabai -m signal --add event=display_removed action="if [ $HAS_ONLY_INTERNAL = true ]; then yabai -m config layout stack; else yabai -m config layout bsp; for SID in $INTERNAL_SPACE_IDS; do yabai -m config --space \$SID layout stack; done; fi"
# yabai -m signal --add event=display_moved action="if [ $HAS_ONLY_INTERNAL = true ]; then yabai -m config layout stack; else yabai -m config layout bsp; for SID in $INTERNAL_SPACE_IDS; do yabai -m config --space \$SID layout stack; done; fi"

#** Disable "Secure Keyboard Entry" for Terminal
# yabai -m signal --add event=window_created app="^Terminal$" action="defaults write -app Terminal SecureKeyboardEntry -bool false"
# yabai -m signal --add event=window_focused app="^Terminal$" action="defaults write -app Terminal SecureKeyboardEntry -bool false"
# yabai -m signal --add event=space_changed action="defaults write -app Terminal SecureKeyboardEntry -bool false"
